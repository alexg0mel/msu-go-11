// Code generated by protoc-gen-go.
// source: session.proto
// DO NOT EDIT!

/*
Package session is a generated protocol buffer package.

It is generated from these files:
	session.proto

It has these top-level messages:
	SessionID
	Session
*/
package session

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ИД сессии - тот что у пользователя в куках
type SessionID struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID" json:"sessionID,omitempty"`
}

func (m *SessionID) Reset()                    { *m = SessionID{} }
func (m *SessionID) String() string            { return proto.CompactTextString(m) }
func (*SessionID) ProtoMessage()               {}
func (*SessionID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SessionID) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

// даныные юзера, которые лежат в сессии
type Session struct {
	Login     string `protobuf:"bytes,1,opt,name=login" json:"login,omitempty"`
	Useragent string `protobuf:"bytes,2,opt,name=useragent" json:"useragent,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Session) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *Session) GetUseragent() string {
	if m != nil {
		return m.Useragent
	}
	return ""
}

func init() {
	proto.RegisterType((*SessionID)(nil), "session.SessionID")
	proto.RegisterType((*Session)(nil), "session.Session")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthChecker service

type AuthCheckerClient interface {
	// создаёт сессию - принимает данные юзера, возвращает ID вессии
	CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionID, error)
	// проверяет сессию - принимает ID сессии из куки - возвращает данные юзера
	CheckSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Session, error)
}

type authCheckerClient struct {
	cc *grpc.ClientConn
}

func NewAuthCheckerClient(cc *grpc.ClientConn) AuthCheckerClient {
	return &authCheckerClient{cc}
}

func (c *authCheckerClient) CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionID, error) {
	out := new(SessionID)
	err := grpc.Invoke(ctx, "/session.AuthChecker/CreateSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCheckerClient) CheckSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/session.AuthChecker/CheckSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthChecker service

type AuthCheckerServer interface {
	// создаёт сессию - принимает данные юзера, возвращает ID вессии
	CreateSession(context.Context, *Session) (*SessionID, error)
	// проверяет сессию - принимает ID сессии из куки - возвращает данные юзера
	CheckSession(context.Context, *SessionID) (*Session, error)
}

func RegisterAuthCheckerServer(s *grpc.Server, srv AuthCheckerServer) {
	s.RegisterService(&_AuthChecker_serviceDesc, srv)
}

func _AuthChecker_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCheckerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.AuthChecker/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCheckerServer).CreateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthChecker_CheckSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCheckerServer).CheckSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.AuthChecker/CheckSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCheckerServer).CheckSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthChecker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.AuthChecker",
	HandlerType: (*AuthCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _AuthChecker_CreateSession_Handler,
		},
		{
			MethodName: "CheckSession",
			Handler:    _AuthChecker_CheckSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

func init() { proto.RegisterFile("session.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2e,
	0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x34, 0xb9,
	0x38, 0x83, 0x21, 0x4c, 0x4f, 0x17, 0x21, 0x19, 0x2e, 0xce, 0x62, 0x18, 0x47, 0x82, 0x51, 0x81,
	0x51, 0x83, 0x33, 0x08, 0x21, 0xa0, 0x64, 0xcb, 0xc5, 0x0e, 0x55, 0x2a, 0x24, 0xc2, 0xc5, 0x9a,
	0x93, 0x9f, 0x9e, 0x99, 0x07, 0x55, 0x04, 0xe1, 0x80, 0xb4, 0x97, 0x16, 0xa7, 0x16, 0x25, 0xa6,
	0xa7, 0xe6, 0x95, 0x48, 0x30, 0x41, 0xb4, 0xc3, 0x05, 0x8c, 0xea, 0xb8, 0xb8, 0x1d, 0x4b, 0x4b,
	0x32, 0x9c, 0x33, 0x52, 0x93, 0xb3, 0x53, 0x8b, 0x84, 0xcc, 0xb9, 0x78, 0x9d, 0x8b, 0x52, 0x13,
	0x4b, 0x52, 0x61, 0x66, 0x0a, 0xe8, 0xc1, 0x9c, 0x08, 0x15, 0x91, 0x12, 0x42, 0x17, 0xf1, 0x74,
	0x51, 0x62, 0x10, 0x32, 0xe3, 0xe2, 0x01, 0x9b, 0x01, 0xd3, 0x87, 0x45, 0x95, 0x14, 0x86, 0x59,
	0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x9f, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x45, 0x9b,
	0x45, 0x0a, 0x01, 0x00, 0x00,
}
